/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package twitter;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tweet
        extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord
{
    private static final long serialVersionUID = -1135521499786715172L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tweet\",\"namespace\":\"twitter\",\"fields\":[{\"name\":\"created_at\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"long\"},{\"name\":\"text\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"retweet_count\",\"type\":\"int\"},{\"name\":\"favorite_count\",\"type\":\"int\"},{\"name\":\"user_id\",\"type\":\"long\"},{\"name\":\"screen_name\",\"type\":\"string\"},{\"name\":\"location\",\"type\":[\"null\",\"string\"]},{\"name\":\"description\",\"type\":[\"null\",\"string\"]},{\"name\":\"followers_count\",\"type\":\"int\"},{\"name\":\"statuses_count\",\"type\":\"int\"},{\"name\":\"geo_enabled\",\"type\":\"boolean\"},{\"name\":\"lang\",\"type\":\"string\"},{\"name\":\"latitude\",\"type\":[\"null\",\"float\"]},{\"name\":\"longitude\",\"type\":[\"null\",\"float\"]},{\"name\":\"hashtags\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"urls\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"mentions\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");

    public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

    @Deprecated public java.lang.CharSequence created_at;
    @Deprecated public long id;
    @Deprecated public java.lang.CharSequence text;
    @Deprecated public java.lang.CharSequence source;
    @Deprecated public int retweet_count;
    @Deprecated public int favorite_count;
    @Deprecated public long user_id;
    @Deprecated public java.lang.CharSequence screen_name;
    @Deprecated public java.lang.CharSequence location;
    @Deprecated public java.lang.CharSequence description;
    @Deprecated public int followers_count;
    @Deprecated public int statuses_count;
    @Deprecated public boolean geo_enabled;
    @Deprecated public java.lang.CharSequence lang;
    @Deprecated public java.lang.Float latitude;
    @Deprecated public java.lang.Float longitude;
    @Deprecated public java.util.List<java.lang.CharSequence> hashtags;
    @Deprecated public java.util.List<java.lang.CharSequence> urls;
    @Deprecated public java.util.List<java.lang.CharSequence> mentions;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public Tweet() {}

    /**
     * All-args constructor.
     */
    public Tweet(java.lang.CharSequence created_at, java.lang.Long id, java.lang.CharSequence text, java.lang.CharSequence source, java.lang.Integer retweet_count, java.lang.Integer favorite_count, java.lang.Long user_id, java.lang.CharSequence screen_name, java.lang.CharSequence location, java.lang.CharSequence description, java.lang.Integer followers_count, java.lang.Integer statuses_count, java.lang.Boolean geo_enabled, java.lang.CharSequence lang, java.lang.Float latitude, java.lang.Float longitude, java.util.List<java.lang.CharSequence> hashtags, java.util.List<java.lang.CharSequence> urls, java.util.List<java.lang.CharSequence> mentions)
    {
        this.created_at = created_at;
        this.id = id;
        this.text = text;
        this.source = source;
        this.retweet_count = retweet_count;
        this.favorite_count = favorite_count;
        this.user_id = user_id;
        this.screen_name = screen_name;
        this.location = location;
        this.description = description;
        this.followers_count = followers_count;
        this.statuses_count = statuses_count;
        this.geo_enabled = geo_enabled;
        this.lang = lang;
        this.latitude = latitude;
        this.longitude = longitude;
        this.hashtags = hashtags;
        this.urls = urls;
        this.mentions = mentions;
    }

    public org.apache.avro.Schema getSchema() { return SCHEMA$; }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$)
    {
        switch (field$) {
            case 0:
                return created_at;
            case 1:
                return id;
            case 2:
                return text;
            case 3:
                return source;
            case 4:
                return retweet_count;
            case 5:
                return favorite_count;
            case 6:
                return user_id;
            case 7:
                return screen_name;
            case 8:
                return location;
            case 9:
                return description;
            case 10:
                return followers_count;
            case 11:
                return statuses_count;
            case 12:
                return geo_enabled;
            case 13:
                return lang;
            case 14:
                return latitude;
            case 15:
                return longitude;
            case 16:
                return hashtags;
            case 17:
                return urls;
            case 18:
                return mentions;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$)
    {
        switch (field$) {
            case 0:
                created_at = (java.lang.CharSequence) value$;
                break;
            case 1:
                id = (java.lang.Long) value$;
                break;
            case 2:
                text = (java.lang.CharSequence) value$;
                break;
            case 3:
                source = (java.lang.CharSequence) value$;
                break;
            case 4:
                retweet_count = (java.lang.Integer) value$;
                break;
            case 5:
                favorite_count = (java.lang.Integer) value$;
                break;
            case 6:
                user_id = (java.lang.Long) value$;
                break;
            case 7:
                screen_name = (java.lang.CharSequence) value$;
                break;
            case 8:
                location = (java.lang.CharSequence) value$;
                break;
            case 9:
                description = (java.lang.CharSequence) value$;
                break;
            case 10:
                followers_count = (java.lang.Integer) value$;
                break;
            case 11:
                statuses_count = (java.lang.Integer) value$;
                break;
            case 12:
                geo_enabled = (java.lang.Boolean) value$;
                break;
            case 13:
                lang = (java.lang.CharSequence) value$;
                break;
            case 14:
                latitude = (java.lang.Float) value$;
                break;
            case 15:
                longitude = (java.lang.Float) value$;
                break;
            case 16:
                hashtags = (java.util.List<java.lang.CharSequence>) value$;
                break;
            case 17:
                urls = (java.util.List<java.lang.CharSequence>) value$;
                break;
            case 18:
                mentions = (java.util.List<java.lang.CharSequence>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'created_at' field.
     */
    public java.lang.CharSequence getCreatedAt()
    {
        return created_at;
    }

    /**
     * Sets the value of the 'created_at' field.
     * @param value the value to set.
     */
    public void setCreatedAt(java.lang.CharSequence value)
    {
        this.created_at = value;
    }

    /**
     * Gets the value of the 'id' field.
     */
    public java.lang.Long getId()
    {
        return id;
    }

    /**
     * Sets the value of the 'id' field.
     * @param value the value to set.
     */
    public void setId(java.lang.Long value)
    {
        this.id = value;
    }

    /**
     * Gets the value of the 'text' field.
     */
    public java.lang.CharSequence getText()
    {
        return text;
    }

    /**
     * Sets the value of the 'text' field.
     * @param value the value to set.
     */
    public void setText(java.lang.CharSequence value)
    {
        this.text = value;
    }

    /**
     * Gets the value of the 'source' field.
     */
    public java.lang.CharSequence getSource()
    {
        return source;
    }

    /**
     * Sets the value of the 'source' field.
     * @param value the value to set.
     */
    public void setSource(java.lang.CharSequence value)
    {
        this.source = value;
    }

    /**
     * Gets the value of the 'retweet_count' field.
     */
    public java.lang.Integer getRetweetCount()
    {
        return retweet_count;
    }

    /**
     * Sets the value of the 'retweet_count' field.
     * @param value the value to set.
     */
    public void setRetweetCount(java.lang.Integer value)
    {
        this.retweet_count = value;
    }

    /**
     * Gets the value of the 'favorite_count' field.
     */
    public java.lang.Integer getFavoriteCount()
    {
        return favorite_count;
    }

    /**
     * Sets the value of the 'favorite_count' field.
     * @param value the value to set.
     */
    public void setFavoriteCount(java.lang.Integer value)
    {
        this.favorite_count = value;
    }

    /**
     * Gets the value of the 'user_id' field.
     */
    public java.lang.Long getUserId()
    {
        return user_id;
    }

    /**
     * Sets the value of the 'user_id' field.
     * @param value the value to set.
     */
    public void setUserId(java.lang.Long value)
    {
        this.user_id = value;
    }

    /**
     * Gets the value of the 'screen_name' field.
     */
    public java.lang.CharSequence getScreenName()
    {
        return screen_name;
    }

    /**
     * Sets the value of the 'screen_name' field.
     * @param value the value to set.
     */
    public void setScreenName(java.lang.CharSequence value)
    {
        this.screen_name = value;
    }

    /**
     * Gets the value of the 'location' field.
     */
    public java.lang.CharSequence getLocation()
    {
        return location;
    }

    /**
     * Sets the value of the 'location' field.
     * @param value the value to set.
     */
    public void setLocation(java.lang.CharSequence value)
    {
        this.location = value;
    }

    /**
     * Gets the value of the 'description' field.
     */
    public java.lang.CharSequence getDescription()
    {
        return description;
    }

    /**
     * Sets the value of the 'description' field.
     * @param value the value to set.
     */
    public void setDescription(java.lang.CharSequence value)
    {
        this.description = value;
    }

    /**
     * Gets the value of the 'followers_count' field.
     */
    public java.lang.Integer getFollowersCount()
    {
        return followers_count;
    }

    /**
     * Sets the value of the 'followers_count' field.
     * @param value the value to set.
     */
    public void setFollowersCount(java.lang.Integer value)
    {
        this.followers_count = value;
    }

    /**
     * Gets the value of the 'statuses_count' field.
     */
    public java.lang.Integer getStatusesCount()
    {
        return statuses_count;
    }

    /**
     * Sets the value of the 'statuses_count' field.
     * @param value the value to set.
     */
    public void setStatusesCount(java.lang.Integer value)
    {
        this.statuses_count = value;
    }

    /**
     * Gets the value of the 'geo_enabled' field.
     */
    public java.lang.Boolean getGeoEnabled()
    {
        return geo_enabled;
    }

    /**
     * Sets the value of the 'geo_enabled' field.
     * @param value the value to set.
     */
    public void setGeoEnabled(java.lang.Boolean value)
    {
        this.geo_enabled = value;
    }

    /**
     * Gets the value of the 'lang' field.
     */
    public java.lang.CharSequence getLang()
    {
        return lang;
    }

    /**
     * Sets the value of the 'lang' field.
     * @param value the value to set.
     */
    public void setLang(java.lang.CharSequence value)
    {
        this.lang = value;
    }

    /**
     * Gets the value of the 'latitude' field.
     */
    public java.lang.Float getLatitude()
    {
        return latitude;
    }

    /**
     * Sets the value of the 'latitude' field.
     * @param value the value to set.
     */
    public void setLatitude(java.lang.Float value)
    {
        this.latitude = value;
    }

    /**
     * Gets the value of the 'longitude' field.
     */
    public java.lang.Float getLongitude()
    {
        return longitude;
    }

    /**
     * Sets the value of the 'longitude' field.
     * @param value the value to set.
     */
    public void setLongitude(java.lang.Float value)
    {
        this.longitude = value;
    }

    /**
     * Gets the value of the 'hashtags' field.
     */
    public java.util.List<java.lang.CharSequence> getHashtags()
    {
        return hashtags;
    }

    /**
     * Sets the value of the 'hashtags' field.
     * @param value the value to set.
     */
    public void setHashtags(java.util.List<java.lang.CharSequence> value)
    {
        this.hashtags = value;
    }

    /**
     * Gets the value of the 'urls' field.
     */
    public java.util.List<java.lang.CharSequence> getUrls()
    {
        return urls;
    }

    /**
     * Sets the value of the 'urls' field.
     * @param value the value to set.
     */
    public void setUrls(java.util.List<java.lang.CharSequence> value)
    {
        this.urls = value;
    }

    /**
     * Gets the value of the 'mentions' field.
     */
    public java.util.List<java.lang.CharSequence> getMentions()
    {
        return mentions;
    }

    /**
     * Sets the value of the 'mentions' field.
     * @param value the value to set.
     */
    public void setMentions(java.util.List<java.lang.CharSequence> value)
    {
        this.mentions = value;
    }

    /**
     * Creates a new Tweet RecordBuilder.
     * @return A new Tweet RecordBuilder
     */
    public static twitter.Tweet.Builder newBuilder()
    {
        return new twitter.Tweet.Builder();
    }

    /**
     * Creates a new Tweet RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new Tweet RecordBuilder
     */
    public static twitter.Tweet.Builder newBuilder(twitter.Tweet.Builder other)
    {
        return new twitter.Tweet.Builder(other);
    }

    /**
     * Creates a new Tweet RecordBuilder by copying an existing Tweet instance.
     * @param other The existing instance to copy.
     * @return A new Tweet RecordBuilder
     */
    public static twitter.Tweet.Builder newBuilder(twitter.Tweet other)
    {
        return new twitter.Tweet.Builder(other);
    }

    /**
     * RecordBuilder for Tweet instances.
     */
    public static class Builder
            extends org.apache.avro.specific.SpecificRecordBuilderBase<Tweet>
            implements org.apache.avro.data.RecordBuilder<Tweet>
    {

        private java.lang.CharSequence created_at;
        private long id;
        private java.lang.CharSequence text;
        private java.lang.CharSequence source;
        private int retweet_count;
        private int favorite_count;
        private long user_id;
        private java.lang.CharSequence screen_name;
        private java.lang.CharSequence location;
        private java.lang.CharSequence description;
        private int followers_count;
        private int statuses_count;
        private boolean geo_enabled;
        private java.lang.CharSequence lang;
        private java.lang.Float latitude;
        private java.lang.Float longitude;
        private java.util.List<java.lang.CharSequence> hashtags;
        private java.util.List<java.lang.CharSequence> urls;
        private java.util.List<java.lang.CharSequence> mentions;

        /** Creates a new Builder */
        private Builder()
        {
            super(twitter.Tweet.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(twitter.Tweet.Builder other)
        {
            super(other);
            if (isValidValue(fields()[0], other.created_at)) {
                this.created_at = data().deepCopy(fields()[0].schema(), other.created_at);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.id)) {
                this.id = data().deepCopy(fields()[1].schema(), other.id);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.text)) {
                this.text = data().deepCopy(fields()[2].schema(), other.text);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.source)) {
                this.source = data().deepCopy(fields()[3].schema(), other.source);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.retweet_count)) {
                this.retweet_count = data().deepCopy(fields()[4].schema(), other.retweet_count);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.favorite_count)) {
                this.favorite_count = data().deepCopy(fields()[5].schema(), other.favorite_count);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.user_id)) {
                this.user_id = data().deepCopy(fields()[6].schema(), other.user_id);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.screen_name)) {
                this.screen_name = data().deepCopy(fields()[7].schema(), other.screen_name);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.location)) {
                this.location = data().deepCopy(fields()[8].schema(), other.location);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.description)) {
                this.description = data().deepCopy(fields()[9].schema(), other.description);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.followers_count)) {
                this.followers_count = data().deepCopy(fields()[10].schema(), other.followers_count);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.statuses_count)) {
                this.statuses_count = data().deepCopy(fields()[11].schema(), other.statuses_count);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.geo_enabled)) {
                this.geo_enabled = data().deepCopy(fields()[12].schema(), other.geo_enabled);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.lang)) {
                this.lang = data().deepCopy(fields()[13].schema(), other.lang);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.latitude)) {
                this.latitude = data().deepCopy(fields()[14].schema(), other.latitude);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.longitude)) {
                this.longitude = data().deepCopy(fields()[15].schema(), other.longitude);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.hashtags)) {
                this.hashtags = data().deepCopy(fields()[16].schema(), other.hashtags);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.urls)) {
                this.urls = data().deepCopy(fields()[17].schema(), other.urls);
                fieldSetFlags()[17] = true;
            }
            if (isValidValue(fields()[18], other.mentions)) {
                this.mentions = data().deepCopy(fields()[18].schema(), other.mentions);
                fieldSetFlags()[18] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing Tweet instance
         * @param other The existing instance to copy.
         */
        private Builder(twitter.Tweet other)
        {
            super(twitter.Tweet.SCHEMA$);
            if (isValidValue(fields()[0], other.created_at)) {
                this.created_at = data().deepCopy(fields()[0].schema(), other.created_at);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.id)) {
                this.id = data().deepCopy(fields()[1].schema(), other.id);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.text)) {
                this.text = data().deepCopy(fields()[2].schema(), other.text);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.source)) {
                this.source = data().deepCopy(fields()[3].schema(), other.source);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.retweet_count)) {
                this.retweet_count = data().deepCopy(fields()[4].schema(), other.retweet_count);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.favorite_count)) {
                this.favorite_count = data().deepCopy(fields()[5].schema(), other.favorite_count);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.user_id)) {
                this.user_id = data().deepCopy(fields()[6].schema(), other.user_id);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.screen_name)) {
                this.screen_name = data().deepCopy(fields()[7].schema(), other.screen_name);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.location)) {
                this.location = data().deepCopy(fields()[8].schema(), other.location);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.description)) {
                this.description = data().deepCopy(fields()[9].schema(), other.description);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.followers_count)) {
                this.followers_count = data().deepCopy(fields()[10].schema(), other.followers_count);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.statuses_count)) {
                this.statuses_count = data().deepCopy(fields()[11].schema(), other.statuses_count);
                fieldSetFlags()[11] = true;
            }
            if (isValidValue(fields()[12], other.geo_enabled)) {
                this.geo_enabled = data().deepCopy(fields()[12].schema(), other.geo_enabled);
                fieldSetFlags()[12] = true;
            }
            if (isValidValue(fields()[13], other.lang)) {
                this.lang = data().deepCopy(fields()[13].schema(), other.lang);
                fieldSetFlags()[13] = true;
            }
            if (isValidValue(fields()[14], other.latitude)) {
                this.latitude = data().deepCopy(fields()[14].schema(), other.latitude);
                fieldSetFlags()[14] = true;
            }
            if (isValidValue(fields()[15], other.longitude)) {
                this.longitude = data().deepCopy(fields()[15].schema(), other.longitude);
                fieldSetFlags()[15] = true;
            }
            if (isValidValue(fields()[16], other.hashtags)) {
                this.hashtags = data().deepCopy(fields()[16].schema(), other.hashtags);
                fieldSetFlags()[16] = true;
            }
            if (isValidValue(fields()[17], other.urls)) {
                this.urls = data().deepCopy(fields()[17].schema(), other.urls);
                fieldSetFlags()[17] = true;
            }
            if (isValidValue(fields()[18], other.mentions)) {
                this.mentions = data().deepCopy(fields()[18].schema(), other.mentions);
                fieldSetFlags()[18] = true;
            }
        }

        /**
         * Gets the value of the 'created_at' field.
         * @return The value.
         */
        public java.lang.CharSequence getCreatedAt()
        {
            return created_at;
        }

        /**
         * Sets the value of the 'created_at' field.
         * @param value The value of 'created_at'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setCreatedAt(java.lang.CharSequence value)
        {
            validate(fields()[0], value);
            this.created_at = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'created_at' field has been set.
         * @return True if the 'created_at' field has been set, false otherwise.
         */
        public boolean hasCreatedAt()
        {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'created_at' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearCreatedAt()
        {
            created_at = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'id' field.
         * @return The value.
         */
        public java.lang.Long getId()
        {
            return id;
        }

        /**
         * Sets the value of the 'id' field.
         * @param value The value of 'id'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setId(long value)
        {
            validate(fields()[1], value);
            this.id = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId()
        {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'id' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearId()
        {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'text' field.
         * @return The value.
         */
        public java.lang.CharSequence getText()
        {
            return text;
        }

        /**
         * Sets the value of the 'text' field.
         * @param value The value of 'text'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setText(java.lang.CharSequence value)
        {
            validate(fields()[2], value);
            this.text = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'text' field has been set.
         * @return True if the 'text' field has been set, false otherwise.
         */
        public boolean hasText()
        {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'text' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearText()
        {
            text = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'source' field.
         * @return The value.
         */
        public java.lang.CharSequence getSource()
        {
            return source;
        }

        /**
         * Sets the value of the 'source' field.
         * @param value The value of 'source'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setSource(java.lang.CharSequence value)
        {
            validate(fields()[3], value);
            this.source = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'source' field has been set.
         * @return True if the 'source' field has been set, false otherwise.
         */
        public boolean hasSource()
        {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'source' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearSource()
        {
            source = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'retweet_count' field.
         * @return The value.
         */
        public java.lang.Integer getRetweetCount()
        {
            return retweet_count;
        }

        /**
         * Sets the value of the 'retweet_count' field.
         * @param value The value of 'retweet_count'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setRetweetCount(int value)
        {
            validate(fields()[4], value);
            this.retweet_count = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'retweet_count' field has been set.
         * @return True if the 'retweet_count' field has been set, false otherwise.
         */
        public boolean hasRetweetCount()
        {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'retweet_count' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearRetweetCount()
        {
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'favorite_count' field.
         * @return The value.
         */
        public java.lang.Integer getFavoriteCount()
        {
            return favorite_count;
        }

        /**
         * Sets the value of the 'favorite_count' field.
         * @param value The value of 'favorite_count'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setFavoriteCount(int value)
        {
            validate(fields()[5], value);
            this.favorite_count = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'favorite_count' field has been set.
         * @return True if the 'favorite_count' field has been set, false otherwise.
         */
        public boolean hasFavoriteCount()
        {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'favorite_count' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearFavoriteCount()
        {
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'user_id' field.
         * @return The value.
         */
        public java.lang.Long getUserId()
        {
            return user_id;
        }

        /**
         * Sets the value of the 'user_id' field.
         * @param value The value of 'user_id'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setUserId(long value)
        {
            validate(fields()[6], value);
            this.user_id = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'user_id' field has been set.
         * @return True if the 'user_id' field has been set, false otherwise.
         */
        public boolean hasUserId()
        {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'user_id' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearUserId()
        {
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'screen_name' field.
         * @return The value.
         */
        public java.lang.CharSequence getScreenName()
        {
            return screen_name;
        }

        /**
         * Sets the value of the 'screen_name' field.
         * @param value The value of 'screen_name'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setScreenName(java.lang.CharSequence value)
        {
            validate(fields()[7], value);
            this.screen_name = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'screen_name' field has been set.
         * @return True if the 'screen_name' field has been set, false otherwise.
         */
        public boolean hasScreenName()
        {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'screen_name' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearScreenName()
        {
            screen_name = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'location' field.
         * @return The value.
         */
        public java.lang.CharSequence getLocation()
        {
            return location;
        }

        /**
         * Sets the value of the 'location' field.
         * @param value The value of 'location'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setLocation(java.lang.CharSequence value)
        {
            validate(fields()[8], value);
            this.location = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'location' field has been set.
         * @return True if the 'location' field has been set, false otherwise.
         */
        public boolean hasLocation()
        {
            return fieldSetFlags()[8];
        }

        /**
         * Clears the value of the 'location' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearLocation()
        {
            location = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'description' field.
         * @return The value.
         */
        public java.lang.CharSequence getDescription()
        {
            return description;
        }

        /**
         * Sets the value of the 'description' field.
         * @param value The value of 'description'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setDescription(java.lang.CharSequence value)
        {
            validate(fields()[9], value);
            this.description = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'description' field has been set.
         * @return True if the 'description' field has been set, false otherwise.
         */
        public boolean hasDescription()
        {
            return fieldSetFlags()[9];
        }

        /**
         * Clears the value of the 'description' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearDescription()
        {
            description = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'followers_count' field.
         * @return The value.
         */
        public java.lang.Integer getFollowersCount()
        {
            return followers_count;
        }

        /**
         * Sets the value of the 'followers_count' field.
         * @param value The value of 'followers_count'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setFollowersCount(int value)
        {
            validate(fields()[10], value);
            this.followers_count = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'followers_count' field has been set.
         * @return True if the 'followers_count' field has been set, false otherwise.
         */
        public boolean hasFollowersCount()
        {
            return fieldSetFlags()[10];
        }

        /**
         * Clears the value of the 'followers_count' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearFollowersCount()
        {
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'statuses_count' field.
         * @return The value.
         */
        public java.lang.Integer getStatusesCount()
        {
            return statuses_count;
        }

        /**
         * Sets the value of the 'statuses_count' field.
         * @param value The value of 'statuses_count'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setStatusesCount(int value)
        {
            validate(fields()[11], value);
            this.statuses_count = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'statuses_count' field has been set.
         * @return True if the 'statuses_count' field has been set, false otherwise.
         */
        public boolean hasStatusesCount()
        {
            return fieldSetFlags()[11];
        }

        /**
         * Clears the value of the 'statuses_count' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearStatusesCount()
        {
            fieldSetFlags()[11] = false;
            return this;
        }

        /**
         * Gets the value of the 'geo_enabled' field.
         * @return The value.
         */
        public java.lang.Boolean getGeoEnabled()
        {
            return geo_enabled;
        }

        /**
         * Sets the value of the 'geo_enabled' field.
         * @param value The value of 'geo_enabled'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setGeoEnabled(boolean value)
        {
            validate(fields()[12], value);
            this.geo_enabled = value;
            fieldSetFlags()[12] = true;
            return this;
        }

        /**
         * Checks whether the 'geo_enabled' field has been set.
         * @return True if the 'geo_enabled' field has been set, false otherwise.
         */
        public boolean hasGeoEnabled()
        {
            return fieldSetFlags()[12];
        }

        /**
         * Clears the value of the 'geo_enabled' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearGeoEnabled()
        {
            fieldSetFlags()[12] = false;
            return this;
        }

        /**
         * Gets the value of the 'lang' field.
         * @return The value.
         */
        public java.lang.CharSequence getLang()
        {
            return lang;
        }

        /**
         * Sets the value of the 'lang' field.
         * @param value The value of 'lang'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setLang(java.lang.CharSequence value)
        {
            validate(fields()[13], value);
            this.lang = value;
            fieldSetFlags()[13] = true;
            return this;
        }

        /**
         * Checks whether the 'lang' field has been set.
         * @return True if the 'lang' field has been set, false otherwise.
         */
        public boolean hasLang()
        {
            return fieldSetFlags()[13];
        }

        /**
         * Clears the value of the 'lang' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearLang()
        {
            lang = null;
            fieldSetFlags()[13] = false;
            return this;
        }

        /**
         * Gets the value of the 'latitude' field.
         * @return The value.
         */
        public java.lang.Float getLatitude()
        {
            return latitude;
        }

        /**
         * Sets the value of the 'latitude' field.
         * @param value The value of 'latitude'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setLatitude(java.lang.Float value)
        {
            validate(fields()[14], value);
            this.latitude = value;
            fieldSetFlags()[14] = true;
            return this;
        }

        /**
         * Checks whether the 'latitude' field has been set.
         * @return True if the 'latitude' field has been set, false otherwise.
         */
        public boolean hasLatitude()
        {
            return fieldSetFlags()[14];
        }

        /**
         * Clears the value of the 'latitude' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearLatitude()
        {
            latitude = null;
            fieldSetFlags()[14] = false;
            return this;
        }

        /**
         * Gets the value of the 'longitude' field.
         * @return The value.
         */
        public java.lang.Float getLongitude()
        {
            return longitude;
        }

        /**
         * Sets the value of the 'longitude' field.
         * @param value The value of 'longitude'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setLongitude(java.lang.Float value)
        {
            validate(fields()[15], value);
            this.longitude = value;
            fieldSetFlags()[15] = true;
            return this;
        }

        /**
         * Checks whether the 'longitude' field has been set.
         * @return True if the 'longitude' field has been set, false otherwise.
         */
        public boolean hasLongitude()
        {
            return fieldSetFlags()[15];
        }

        /**
         * Clears the value of the 'longitude' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearLongitude()
        {
            longitude = null;
            fieldSetFlags()[15] = false;
            return this;
        }

        /**
         * Gets the value of the 'hashtags' field.
         * @return The value.
         */
        public java.util.List<java.lang.CharSequence> getHashtags()
        {
            return hashtags;
        }

        /**
         * Sets the value of the 'hashtags' field.
         * @param value The value of 'hashtags'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setHashtags(java.util.List<java.lang.CharSequence> value)
        {
            validate(fields()[16], value);
            this.hashtags = value;
            fieldSetFlags()[16] = true;
            return this;
        }

        /**
         * Checks whether the 'hashtags' field has been set.
         * @return True if the 'hashtags' field has been set, false otherwise.
         */
        public boolean hasHashtags()
        {
            return fieldSetFlags()[16];
        }

        /**
         * Clears the value of the 'hashtags' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearHashtags()
        {
            hashtags = null;
            fieldSetFlags()[16] = false;
            return this;
        }

        /**
         * Gets the value of the 'urls' field.
         * @return The value.
         */
        public java.util.List<java.lang.CharSequence> getUrls()
        {
            return urls;
        }

        /**
         * Sets the value of the 'urls' field.
         * @param value The value of 'urls'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setUrls(java.util.List<java.lang.CharSequence> value)
        {
            validate(fields()[17], value);
            this.urls = value;
            fieldSetFlags()[17] = true;
            return this;
        }

        /**
         * Checks whether the 'urls' field has been set.
         * @return True if the 'urls' field has been set, false otherwise.
         */
        public boolean hasUrls()
        {
            return fieldSetFlags()[17];
        }

        /**
         * Clears the value of the 'urls' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearUrls()
        {
            urls = null;
            fieldSetFlags()[17] = false;
            return this;
        }

        /**
         * Gets the value of the 'mentions' field.
         * @return The value.
         */
        public java.util.List<java.lang.CharSequence> getMentions()
        {
            return mentions;
        }

        /**
         * Sets the value of the 'mentions' field.
         * @param value The value of 'mentions'.
         * @return This builder.
         */
        public twitter.Tweet.Builder setMentions(java.util.List<java.lang.CharSequence> value)
        {
            validate(fields()[18], value);
            this.mentions = value;
            fieldSetFlags()[18] = true;
            return this;
        }

        /**
         * Checks whether the 'mentions' field has been set.
         * @return True if the 'mentions' field has been set, false otherwise.
         */
        public boolean hasMentions()
        {
            return fieldSetFlags()[18];
        }

        /**
         * Clears the value of the 'mentions' field.
         * @return This builder.
         */
        public twitter.Tweet.Builder clearMentions()
        {
            mentions = null;
            fieldSetFlags()[18] = false;
            return this;
        }

        @Override
        public Tweet build()
        {
            try {
                Tweet record = new Tweet();
                record.created_at = fieldSetFlags()[0] ? this.created_at : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.id = fieldSetFlags()[1] ? this.id : (java.lang.Long) defaultValue(fields()[1]);
                record.text = fieldSetFlags()[2] ? this.text : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.source = fieldSetFlags()[3] ? this.source : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.retweet_count = fieldSetFlags()[4] ? this.retweet_count : (java.lang.Integer) defaultValue(fields()[4]);
                record.favorite_count = fieldSetFlags()[5] ? this.favorite_count : (java.lang.Integer) defaultValue(fields()[5]);
                record.user_id = fieldSetFlags()[6] ? this.user_id : (java.lang.Long) defaultValue(fields()[6]);
                record.screen_name = fieldSetFlags()[7] ? this.screen_name : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.location = fieldSetFlags()[8] ? this.location : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.description = fieldSetFlags()[9] ? this.description : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.followers_count = fieldSetFlags()[10] ? this.followers_count : (java.lang.Integer) defaultValue(fields()[10]);
                record.statuses_count = fieldSetFlags()[11] ? this.statuses_count : (java.lang.Integer) defaultValue(fields()[11]);
                record.geo_enabled = fieldSetFlags()[12] ? this.geo_enabled : (java.lang.Boolean) defaultValue(fields()[12]);
                record.lang = fieldSetFlags()[13] ? this.lang : (java.lang.CharSequence) defaultValue(fields()[13]);
                record.latitude = fieldSetFlags()[14] ? this.latitude : (java.lang.Float) defaultValue(fields()[14]);
                record.longitude = fieldSetFlags()[15] ? this.longitude : (java.lang.Float) defaultValue(fields()[15]);
                record.hashtags = fieldSetFlags()[16] ? this.hashtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[16]);
                record.urls = fieldSetFlags()[17] ? this.urls : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[17]);
                record.mentions = fieldSetFlags()[18] ? this.mentions : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[18]);
                return record;
            }
            catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    private static final org.apache.avro.io.DatumWriter
            WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException
    {
        WRITER$.write(this, org.apache.avro.specific.SpecificData.getEncoder(out));
    }

    private static final org.apache.avro.io.DatumReader
            READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException
    {
        READER$.read(this, org.apache.avro.specific.SpecificData.getDecoder(in));
    }
}
